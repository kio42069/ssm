#!/usr/bin/env python

import sys, pickle, subprocess, os

args = sys.argv
user = os.getlogin()
base_dir = f"/home/{user}/.config/hypr/scripts/monitor"

#function to fetch cli commands 
def execute_and_capture(cmd):
  try:
    process = subprocess.run(cmd, capture_output=True, text=True, shell=True)
    output = process.stdout.strip()
    return output
  except subprocess.CalledProcessError:
    return ""


def help():
    print("""
    HELP HAS CUM
    WELCOME TO SURT'S SCREENTIME MONITOR
    """)

def total(dic):
    time_consumed = 0
    for i in dic:
        time_consumed += dic[i]
    return time_consumed

def timeify(num):
    return str(num//3600) + "h " + str((num//60)%60) + "m"

# checks for command line arguments,if none passed, then uses this by default
if len(args) == 1:
    try:
        with open(f"{base_dir}/all", "rb") as f:
            print()
            cols = execute_and_capture("tput cols")
            print("-"*int(cols))
            a = pickle.load(f)
            a = dict(sorted(a.items(), key = lambda item: item[1], reverse=True))
            for i in a:
                timer = timeify(a[i])
                print("|", i, end = "")
                print(" "*(int(cols)-len(i)-len(timer) - 5), end = "")
                print(timer, "|")
            print("-"*int(cols))
    except:
        execute_and_capture("notify-send 'log file not found, try running monitor first'")

elif(args[1] == '-l'):
    try:
        with open(f"{base_dir}/apps", "rb") as f:
            a = pickle.load(f)
            a = dict(sorted(a.items(), key = lambda item: item[1], reverse=True))
            cols = execute_and_capture("tput cols")
            print("-"*int(cols))
            flag = False
            try:
                number_of_results = int(args[2])
            except:
                number_of_results = len(a)
            counter = 0
            for i in a:
                counter += 1
                timer = timeify(a[i])
                if("0h 0m" in timer):
                    continue
                else:
                    print("|", i,end = "")
                    print(" "*(int(cols)-len(i)-len(timer) - 5), end = "")
                    print(timer, "|")
                if(counter == number_of_results):
                    break
            print("-"*int(cols))
    except:
        execute_and_capture("notify-send 'log file not found, try running monitor first'")
elif args[1] == "-h":
    help()
elif args[1] == "-d":
    date = args[2]
    print(f"fetching records from {date}")
    print("Enter \n 1. to view window stats \n 2. to view all application stats: ", end = "")
    choice = int(input())
    if choice == 1:
        try:
            with open(f"{base_dir}/all_{date}", "rb") as f:
                print()
                cols = execute_and_capture("tput cols")
                print("-"*int(cols))
                a = pickle.load(f)
                a = dict(sorted(a.items(), key = lambda item: item[1], reverse=True))
                for i in a:
                    timer = str(a[i]//3600)+"h"+" "+ str((a[i]//60)%60)+"m"
                    print("|", i, end = "")
                    print(" "*(int(cols)-len(i)-len(timer) - 5), end = "")
                    print(timer, "|")
                print("-"*int(cols))
        except:
            execute_and_capture("notify-send 'log file not found, check your date, should be YYYY-MM-DD'")

    elif choice == 2:
        try:
            with open(f"{base_dir}/apps_{date}", "rb") as f:
                print()
                a = pickle.load(f)
                a = dict(sorted(a.items(), key = lambda item: item[1], reverse=True))
                cols = execute_and_capture("tput cols")
                print("-"*int(cols))
                flag = False
                for i in a:
                    timer = str(a[i]//3600)+"h" + " " + str((a[i]//60)%60)+"m"
                    if("0h 0m" in timer):
                        continue
                    else:
                        print("|", i,end = "")
                        print(" "*(int(cols)-len(i)-len(timer) - 5), end = "")
                        print(timer, "|")
                print("-"*int(cols))
        except:
            execute_and_capture("notify-send 'log file not found, check your date, should be YYYY-MM-DD'")
    else:
        print("bro what")
else:
    cols = execute_and_capture("tput cols")
    print("-"*int(cols))
    e = execute_and_capture(f'reader -l 1000| grep -i "{args[1]}"')
    print(e)
    print("-"*int(cols))